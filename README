= Simple JPEG Extension Library for Ruby

== Overview

This is a simple JPEG extension library for Ruby.
This library only supports reading and writing JPEG files.
You can access raw RGB data if you need.


== Requires

IJG's jpeg library (libjpeg)


== How to build

 $ ruby extconf.rb
 $ make

If you use VC++, run nmake instead of make.

If extconf.rb cannot find libjpeg headers and/or library, you should specify
their paths by --with-jpeg-include and --with-jpeg-lib options.


== Reference

=== module JPEG
==== constants
: JPEG::VERSION
  Version string of this library.

==== module methods
--- JPEG.read(io)
Read JPEG file from io and returns JPEG::Image object.

io must be an IO object. It will be binmode'ed.

--- JPEG.write(img, io)
Write img as JPEG file to io.

img must be a JPEG::Image object.
io must be an IO object. It will be binmode'ed.

=== class JPEG::Image
==== class methods
--- JPEG::Image.new
Create a JPEG::Image object.

==== instance methods
--- JPEG::Image#width
Returns the width of the image.

--- JPEG::Image#width=(num)
Set the width of the image.

num must be an Integer object. It must be more than 0.

--- JPEG::Image#height
Returns the height of the image.

--- JPEG::Image#width=(num)
Set the height of the image.

num must be an Integer object. It must be more than 0.

--- JPEG::Image#quality
Returns the quality of the image.

--- JPEG::Image#quality=(num)
Set the quality of the image.

num must be an Integer object. It must be more than 0 and less than or 
equal to 100.

--- JPEG::Image#raw_data
Returns the raw RGB data of the image.

The returned value is a String object.
1 pixel is 3 bytes -- 1st byte means red, 2nd byte means green, and 3rd byte
means blue.
The raw data starts the pixel of left-top corner.
And next 3 bytes is the right pixel of it, and so on.
After first line ended, the most left pixel of next line starts.

--- JPEG::Image#raw_data=(str)
Set the raw RGB data of the image.

str must be a String object. It must be larger than or equal to the required
size. You can calculate that the size is width * 3 * height.

--- JPEG::bilinear(width, height)
Create and returns a new JPEG::Image object by converting the size of the image.
It converts the image by using bilinear operation.

width and height must be Integer objects. They must be more than 0.

=== class JPEG::Reader
==== class methods
--- JPEG::Reader.new(io)
--- JPEG::Reader.open(io)
Create and returns a JPEG::Reader object.
The object will read a JPEG file from io.

io must be an IO object. It will be binmode'ed.

--- JPEG::Reader.open(io) {|reader| ... }
Create a JPEG::Reader object and will pass it to the given block.
After executing the block, it returns nil.

==== instance methods
--- JPEG::Reader#close
Close the object.
You can never use this object to read data.

--- JPEG::Reader#each {|line| ... }
--- JPEG::Reader#each_line {|line| ... }
--- JPEG::Reader#read_each_line {|line| ... }
Reads the JPEG file and passes the raw RGB data of each lines to the block.
The passed line will be a String object. 
1 pixel is 3 bytes -- 1st byte means red, 2nd byte means green, and 3rd byte
means blue.

--- JPEG::Reader#width
Returns the width of the image.

--- JPEG::Reader#height
Returns the height of the image.

=== class JPEG::Writer
==== class methods
--- JPEG::Writer.new(io, width, height, quality)
--- JPEG::Writer.open(io, width, height, quality)
Create and returns a JPEG::Writer object.
The object will write a JPEG file to io.

io must be an IO object. It will be binmode'ed.
width must be an Integer object. It must be more than 0.
height must be an Integer object. It must be more than 0.
quality must be an Integer object. It must be more than 0 and less than or 
equal to 100.

--- JPEG::Writer.open(io) {|writer| ... }
Create a JPEG::Writer object and will pass it to the given block.
The object will write a JPEG file to io.

io must be an IO object. It will be binmode'ed.
width must be an Integer object. It must be more than 0.
height must be an Integer object. It must be more than 0.
quality must be an Integer object. It must be more than 0 and less than or 
equal to 100.

After executing the block, it returns nil.

==== instance methods
--- JPEG::Writer#close
Close the object.
You can never use this object to write data.

--- JPEG::Writer#write_each_line { ... }
Write the return value of the block as the raw RGB data of each lines to
the JPEG file.
The return value must be a String object. 
1 pixel is 3 bytes -- 1st byte means red, 2nd byte means green, and 3rd byte
means blue.

--- JPEG::Writer#width
Returns the width of the image.

--- JPEG::Writer#height
Returns the height of the image.

--- JPEG::Writer#quality
Returns the quality of the image.


== LEGAL Issue

Copyright (c) 2007  NAKAMURA Usaku <usa@garbagecollect.jp>
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

(1) Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.
(2) Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS
BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN
IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

=== Attention
The binary form of this library may contain the libjpeg's code.
In such case, you might have to consider to the license of libjpeg.
